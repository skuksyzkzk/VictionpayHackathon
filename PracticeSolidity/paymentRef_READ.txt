Micropayment Channel
In this section we will learn how to build an example implementation of a payment channel.
It uses cryptographic signatures to make repeated transfers of VIC between the same parties secure, instantaneous, and without transaction fees. 
For the example, we need to understand how to sign and verify signatures, and setup the payment channel.

암호 서명 생성 및 확인:

Alice가 VIC를 Bob에게 보내려고 할 때, Alice는 암호 서명된 메시지를 생성하여 Bob에게 보냅니다. 이는 메일 등을 통해 오프 체인(Off-chain)으로 전송됩니다. 여기서 암호 서명은 지갑의 개인 키를 사용하여 생성됩니다.
Alice와 Bob은 거래를 승인하기 위해 서명을 사용하며, 이는 Viction의 스마트 계약을 통해 가능합니다.
Alice는 VIC를 송금하는 간단한 스마트 계약을 구축합니다. 그러나 직접 함수를 호출하여 송금을 시작하는 대신에, Bob이 이를 수행하도록 하여 거래 수수료를 지불하게 합니다.


스마트 컨트랙트 동작 방식:

Alice는 ReceiverPays 계약을 배포하며, 지불될 금액을 커버할 만큼의 VIC을 첨부합니다.
Alice는 개인 키를 사용하여 메시지에 서명하여 지불을 승인합니다.
Alice는 암호 서명된 메시지를 Bob에게 보냅니다. 이 메시지는 비밀로 유지될 필요가 없으며, 전송 방법은 중요하지 않습니다.
Bob은 서명된 메시지를 스마트 계약에 제시하여 메시지의 진위를 확인하고 자금을 해제합니다.

결국 사인을 만들어야된다...

사인만들기 

사인의 내용 
1.받는 사람 주소
2.전송할 양
3.replay attack의 방어 

replay attack이 뭔데 
리플레이 공격이라고도 하는 플레이백(Playback) 공격은 악성 해커가 네트워크를 통해 유효한 데이터 전송을 가로 챈 후 반복하는 사이버 공격입니다.

리플레이 공격은 서명된 메시지가 두 번째 동작에 대한 승인을 요청할 때 발생하는 것입니다. 리플레이 공격을 피하기 위해 Viction 거래와 마찬가지로 nonce(계정이 보낸 거래의 수)를 사용합니다. 스마트 계약은 nonce가 여러 번 사용되었는지 확인합니다

그래서 논스가 한번 세어지면 다시 세지않아서 방지하는 것이다 .

또 다른 유형의 리플레이 공격은 소유자가 ReceiverPays 스마트 계약을 배포하고 일부 지불을 수행한 다음 계약을 파괴한 후, 나중에 다시 RecipientPays 스마트 계약을 배포하려고 할 때 발생할 수 있습니다. 새로운 계약은 이전 배포에서 사용된 nonce를 알지 못하기 때문에 공격자는 이전 메시지를 다시 사용할 수 있습니다.
Alice는 이러한 공격에 대비하기 위해 메시지에 계약의 주소를 포함시키고, 계약의 주소를 포함하지 않은 메시지는 거부되도록 설계할 수 있습니다.

